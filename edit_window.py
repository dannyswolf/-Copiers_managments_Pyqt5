# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'edit_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.8
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from settings import today, root_logger
from db import get_item_from_table, Οροφος_6, Οροφος_5, Οροφος_4, Οροφος_2, Οροφος_1, Κτέο, Πασιάς, Κτηνιατρείο, \
    Αμύνταιο,  Πρωτοβάθμια, Δευτεροβάθμια, Εκτός, Κεδασυ, get_item_data_from_all_tables, get_offices_from_table
from transport_machine_window import Ui_Transport_Machine_Window
from PyQt5 import QtCore, QtGui, QtWidgets
import traceback
import sys
import os
import pathlib  # Για αποθήκευση αρχείου να πάρουμε μόνο την κατάληξη .svg.png
import subprocess
import shutil
import db
sys.stderr.write = root_logger.error
sys.stdout.write = root_logger.info


class Edit_Ui_Form_Window(QtWidgets.QMainWindow):
    window_closed = QtCore.pyqtSignal()  # Το Signal πρέπει να είναι εκτός __init__ δε δουλεύει αλλιώς

    def __init__(self, *args, **kwargs):
        super(Edit_Ui_Form_Window, self).__init__(*args, **kwargs)
        self.selected_table = None
        self.selected_item_id = None
        self.selected_item = None
        self.old_final_date = None
        self.old_final_counter = None
        self.images_path = None
        self.machines_types = ["ΕΚΤΥΠΩΤΗΣ", "ΠΟΛΥΜΗΧΆΝΗΜΑ", "ΦΩΤΟΤΥΠΙΚΟ", "ΕΚΤΥΠΩΤΗΣ ΕΓΧΡΩΜΟΣ", "INK", "INK TANK", "PLOTTER", "FAX"]
        self.files = None
        self.file = None  # αρχείο που εμφανίζεται
        self.file_index = None  # Δείκτης για το ποιο αρχείο εμφανίζεται
        self.transfer_window = None
        self.selected_table_offices = None
        self.BASE_DIR = None

    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1000, 800)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Form.sizePolicy().hasHeightForWidth())
        Form.setSizePolicy(sizePolicy)

        # ------------------------ ICONS -----------------
        self.active_icon = QtGui.QIcon()
        self.active_icon.addPixmap(QtGui.QPixmap("icons/active.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)

        self.inactive_icon = QtGui.QIcon()
        self.inactive_icon.addPixmap(QtGui.QPixmap("icons/inactive.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)

        self.transfer_icon = QtGui.QIcon()
        self.transfer_icon.addPixmap(QtGui.QPixmap("icons/transport_copier.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)

        # ------------------- FONTS --------------------------
        self.font_14_bold = QtGui.QFont()
        self.font_14_bold.setFamily("Calibri")
        self.font_14_bold.setPointSize(14)
        self.font_14_bold.setBold(True)
        self.font_14_bold.setWeight(85)

        self.font_13 = QtGui.QFont()
        self.font_13.setFamily("Calibri")
        self.font_13.setPointSize(13)
        self.font_13.setBold(False)
        self.font_13.setWeight(55)

        self.gridLayout_3 = QtWidgets.QGridLayout(Form)
        self.gridLayout_3.setObjectName("gridLayout_3")

        self.splitter = QtWidgets.QSplitter(Form)
        self.splitter.setSizePolicy(sizePolicy)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")

        self.left_frame = QtWidgets.QFrame(self.splitter)
        self.left_frame.setSizePolicy(sizePolicy)
        self.left_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.left_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.left_frame.setObjectName("left_frame")
        self.gridLayout = QtWidgets.QGridLayout(self.left_frame)
        self.gridLayout.setObjectName("gridLayout")

        # Κωδικός
        self.code_label = QtWidgets.QLabel(self.left_frame)
        self.code_label.setSizePolicy(sizePolicy)
        self.code_label.setFont(self.font_14_bold)
        self.code_label.setAlignment(QtCore.Qt.AlignCenter)
        self.code_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                      "color: rgb(255, 255, 255);")
        self.code_label.setObjectName("code_label")
        self.gridLayout.addWidget(self.code_label, 0, 0, 1, 1)
        self.code_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.code_lineEdit.setSizePolicy(sizePolicy)
        self.code_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.code_lineEdit.setFont(self.font_13)
        self.code_lineEdit.setObjectName("code_lineEdit")
        self.gridLayout.addWidget(self.code_lineEdit, 1, 0, 1, 1)
        # Οροφος
        self.floor_label = QtWidgets.QLabel(self.left_frame)
        self.floor_label.setSizePolicy(sizePolicy)
        self.floor_label.setFont(self.font_14_bold)
        self.floor_label.setAlignment(QtCore.Qt.AlignCenter)
        self.floor_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                       "color: rgb(255, 255, 255);")
        self.floor_label.setObjectName("floor_label")
        self.gridLayout.addWidget(self.floor_label, 0, 1, 1, 1)
        self.floor_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.floor_lineEdit.setSizePolicy(sizePolicy)
        self.floor_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.floor_lineEdit.setFont(self.font_13)
        self.floor_lineEdit.setObjectName("floor_lineEdit")
        self.gridLayout.addWidget(self.floor_lineEdit, 1, 1, 1, 1)
        # Τύπος
        self.type_label = QtWidgets.QLabel(self.left_frame)
        self.type_label.setSizePolicy(sizePolicy)
        self.type_label.setFont(self.font_14_bold)
        self.type_label.setAlignment(QtCore.Qt.AlignCenter)
        self.type_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                      "color: rgb(255, 255, 255);")
        self.type_label.setObjectName("type_label")
        self.gridLayout.addWidget(self.type_label, 0, 2, 1, 1)
        self.type_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.type_lineEdit.setSizePolicy(sizePolicy)
        self.type_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.type_lineEdit.setFont(self.font_13)
        self.type_lineEdit.setObjectName("type_lineEdit")
        self.type_completer = QtWidgets.QCompleter(self.machines_types)
        self.type_completer.popup().setFont(self.font_13)
        self.type_lineEdit.setCompleter(self.type_completer)
        self.type_combobox = QtWidgets.QComboBox(self.left_frame)
        self.type_combobox.setMinimumSize(QtCore.QSize(0, 30))
        self.type_combobox.setFont(self.font_13)
        self.type_combobox.setObjectName("type_combobox")
        self.type_combobox.setLineEdit(self.type_lineEdit)
        self.type_combobox.addItems(self.machines_types)
        self.gridLayout.addWidget(self.type_combobox, 1, 2, 1, 1)
        # Μοντέλο
        self.model_label = QtWidgets.QLabel(self.left_frame)
        self.model_label.setSizePolicy(sizePolicy)
        self.model_label.setFont(self.font_14_bold)
        self.model_label.setAlignment(QtCore.Qt.AlignCenter)
        self.model_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                       "color: rgb(255, 255, 255);")
        self.model_label.setObjectName("model_label")
        self.gridLayout.addWidget(self.model_label, 2, 0, 1, 2)
        self.model_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.model_lineEdit.setSizePolicy(sizePolicy)
        self.model_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.model_lineEdit.setFont(self.font_13)
        self.model_lineEdit.setObjectName("model_lineEdit")
        self.gridLayout.addWidget(self.model_lineEdit, 3, 0, 1, 2)
        # Serial
        self.serial_label = QtWidgets.QLabel(self.left_frame)
        self.serial_label.setSizePolicy(sizePolicy)
        self.serial_label.setFont(self.font_14_bold)
        self.serial_label.setAlignment(QtCore.Qt.AlignCenter)
        self.serial_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                        "color: rgb(255, 255, 255);")
        self.serial_label.setObjectName("serial_label")
        self.gridLayout.addWidget(self.serial_label, 2, 2, 1, 1)
        self.serial_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.serial_lineEdit.setSizePolicy(sizePolicy)
        self.serial_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.serial_lineEdit.setFont(self.font_13)
        self.serial_lineEdit.setText("")
        self.serial_lineEdit.setObjectName("serial_lineEdit")
        self.gridLayout.addWidget(self.serial_lineEdit, 3, 2, 1, 1)
        # Γραφείο
        self.office_label = QtWidgets.QLabel(self.left_frame)
        self.office_label.setSizePolicy(sizePolicy)
        self.office_label.setFont(self.font_14_bold)
        self.office_label.setAlignment(QtCore.Qt.AlignCenter)
        self.office_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                        "color: rgb(255, 255, 255);")
        self.office_label.setObjectName("office_label")
        self.gridLayout.addWidget(self.office_label, 4, 0, 1, 3)
        self.office_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.office_lineEdit.setSizePolicy(sizePolicy)
        self.office_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.office_lineEdit.setFont(self.font_13)
        self.office_lineEdit.setText("")
        self.office_lineEdit.setObjectName("office_lineEdit")
        self.gridLayout.addWidget(self.office_lineEdit, 5, 0, 1, 3)
        # Αρχικός
        self.start_counter_label = QtWidgets.QLabel(self.left_frame)
        self.start_counter_label.setSizePolicy(sizePolicy)
        self.start_counter_label.setFont(self.font_14_bold)
        self.start_counter_label.setAlignment(QtCore.Qt.AlignCenter)
        self.start_counter_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                               "color: rgb(255, 255, 255);")
        self.start_counter_label.setObjectName("start_counter_label")
        self.gridLayout.addWidget(self.start_counter_label, 6, 0, 1, 2)
        self.start_counter_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.start_counter_lineEdit.setSizePolicy(sizePolicy)
        self.start_counter_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.start_counter_lineEdit.setFont(self.font_13)
        self.start_counter_lineEdit.setText("")
        self.start_counter_lineEdit.setValidator(QtGui.QIntValidator())
        self.start_counter_lineEdit.setObjectName("start_counter_lineEdit")
        self.start_counter_lineEdit.editingFinished.connect(self.calculate_total)
        self.gridLayout.addWidget(self.start_counter_lineEdit, 7, 0, 1, 2)
        # Ημερομηνία αρχικού
        self.start_date_label = QtWidgets.QLabel(self.left_frame)
        self.start_date_label.setSizePolicy(sizePolicy)
        self.start_date_label.setFont(self.font_14_bold)
        self.start_date_label.setAlignment(QtCore.Qt.AlignCenter)
        self.start_date_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                            "color: rgb(255, 255, 255);")
        self.start_date_label.setObjectName("start_date_label")
        self.gridLayout.addWidget(self.start_date_label, 6, 2, 1, 1)
        self.start_dateEdit = QtWidgets.QDateEdit(self.left_frame)
        self.start_dateEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.start_dateEdit.setFont(self.font_13)
        self.start_dateEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.start_dateEdit.setReadOnly(False)
        self.start_dateEdit.setCalendarPopup(True)
        self.start_dateEdit.setObjectName("start_dateEdit")
        self.gridLayout.addWidget(self.start_dateEdit, 7, 2, 1, 1)
        # Τελικός μετρητής
        self.final_counter_label = QtWidgets.QLabel(self.left_frame)
        self.final_counter_label.setSizePolicy(sizePolicy)
        self.final_counter_label.setFont(self.font_14_bold)
        self.final_counter_label.setAlignment(QtCore.Qt.AlignCenter)
        self.final_counter_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                               "color: rgb(255, 255, 255);")
        self.final_counter_label.setObjectName("final_counter_label")
        self.gridLayout.addWidget(self.final_counter_label, 8, 0, 1, 2)
        self.final_counter_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.final_counter_lineEdit.setSizePolicy(sizePolicy)
        self.final_counter_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.final_counter_lineEdit.setFont(self.font_13)
        self.final_counter_lineEdit.setText("")
        self.final_counter_lineEdit.setValidator(QtGui.QIntValidator())
        self.final_counter_lineEdit.setObjectName("final_counter_lineEdit")
        self.final_counter_lineEdit.editingFinished.connect(self.calculate_total)
        self.gridLayout.addWidget(self.final_counter_lineEdit, 9, 0, 1, 2)
        # Ημερομηνία τελικού
        self.final_date_label = QtWidgets.QLabel(self.left_frame)
        self.final_date_label.setSizePolicy(sizePolicy)
        self.final_date_label.setFont(self.font_14_bold)
        self.final_date_label.setAlignment(QtCore.Qt.AlignCenter)
        self.final_date_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                            "color: rgb(255, 255, 255);")
        self.final_date_label.setObjectName("final_date_label")
        self.gridLayout.addWidget(self.final_date_label, 8, 2, 1, 1)
        self.final_dateEdit = QtWidgets.QDateEdit(self.left_frame)
        self.final_dateEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.final_dateEdit.setFont(self.font_13)
        self.final_dateEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.final_dateEdit.setReadOnly(False)
        self.final_dateEdit.setCalendarPopup(True)
        self.final_dateEdit.setObjectName("final_dateEdit")
        self.gridLayout.addWidget(self.final_dateEdit, 9, 2, 1, 1)
        # Συνολικός μετρητής
        self.total_label = QtWidgets.QLabel(self.left_frame)
        self.total_label.setSizePolicy(sizePolicy)
        self.total_label.setFont(self.font_14_bold)
        self.total_label.setStyleSheet("color: rgb(255, 0, 0);")
        self.total_label.setAlignment(QtCore.Qt.AlignCenter)
        self.total_label.setObjectName("total_label")
        self.gridLayout.addWidget(self.total_label, 10, 0, 1, 2)
        self.total_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.total_lineEdit.setSizePolicy(sizePolicy)
        self.total_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.total_lineEdit.setFont(self.font_13)
        self.total_lineEdit.setReadOnly(True)
        self.total_lineEdit.setValidator(QtGui.QIntValidator())
        self.total_lineEdit.setObjectName("total_lineEdit")
        self.gridLayout.addWidget(self.total_lineEdit, 11, 0, 1, 2)
        # Τύπος χρέωσης
        self.billing_type_label = QtWidgets.QLabel(self.left_frame)
        self.billing_type_label.setFont(self.font_14_bold)
        self.billing_type_label.setAlignment(QtCore.Qt.AlignCenter)
        self.billing_type_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                              "color: rgb(255, 255, 255);")
        self.billing_type_label.setObjectName("billing_type_label")
        self.gridLayout.addWidget(self.billing_type_label, 10, 2, 1, 1)
        self.billing_type_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.billing_type_lineEdit.setFont(self.font_13)
        self.billing_type_lineEdit.setObjectName("billing_type_lineEdit")
        self.gridLayout.addWidget(self.billing_type_lineEdit, 11, 2, 1, 1)
        # Toner original
        self.toner_original_label = QtWidgets.QLabel(self.left_frame)
        self.toner_original_label.setSizePolicy(sizePolicy)
        self.toner_original_label.setFont(self.font_14_bold)
        self.toner_original_label.setAlignment(QtCore.Qt.AlignCenter)
        self.toner_original_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                                "color: rgb(255, 255, 255);")
        self.toner_original_label.setObjectName("toner_original_label")
        self.gridLayout.addWidget(self.toner_original_label, 12, 0, 1, 2)
        self.toner_original_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.toner_original_lineEdit.setSizePolicy(sizePolicy)
        self.toner_original_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.toner_original_lineEdit.setFont(self.font_13)
        self.toner_original_lineEdit.setObjectName("toner_original_lineEdit")
        self.gridLayout.addWidget(self.toner_original_lineEdit, 13, 0, 1, 2)
        # Toner συμβατό
        self.toner_compatible_label = QtWidgets.QLabel(self.left_frame)
        self.toner_compatible_label.setSizePolicy(sizePolicy)
        self.toner_compatible_label.setFont(self.font_14_bold)
        self.toner_compatible_label.setAlignment(QtCore.Qt.AlignCenter)
        self.toner_compatible_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                                  "color: rgb(255, 255, 255);")
        self.toner_compatible_label.setObjectName("toner_compatible_label")
        self.gridLayout.addWidget(self.toner_compatible_label, 12, 2, 1, 1)
        self.toner_compatible_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.toner_compatible_lineEdit.setSizePolicy(sizePolicy)
        self.toner_compatible_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.toner_compatible_lineEdit.setFont(self.font_13)
        self.toner_compatible_lineEdit.setObjectName("toner_compatible_lineEdit")
        self.gridLayout.addWidget(self.toner_compatible_lineEdit, 13, 2, 1, 1)
        # Drum
        self.drum_label = QtWidgets.QLabel(self.left_frame)
        self.drum_label.setSizePolicy(sizePolicy)
        self.drum_label.setFont(self.font_14_bold)
        self.drum_label.setAlignment(QtCore.Qt.AlignCenter)
        self.drum_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                      "color: rgb(255, 255, 255);")
        self.drum_label.setObjectName("drum_label")
        self.gridLayout.addWidget(self.drum_label, 14, 0, 1, 2)
        self.drum_lineEdit = QtWidgets.QLineEdit(self.left_frame)
        self.drum_lineEdit.setSizePolicy(sizePolicy)
        self.drum_lineEdit.setMinimumSize(QtCore.QSize(0, 30))
        self.drum_lineEdit.setFont(self.font_13)
        self.drum_lineEdit.setObjectName("drum_lineEdit")
        self.gridLayout.addWidget(self.drum_lineEdit, 15, 0, 1, 2)
        # Ενεργό
        self.active_label = QtWidgets.QLabel(self.left_frame)
        self.active_label.setSizePolicy(sizePolicy)
        self.active_label.setFont(self.font_14_bold)
        self.active_label.setAlignment(QtCore.Qt.AlignCenter)
        self.active_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                        "color: rgb(255, 255, 255);")
        self.active_label.setObjectName("active_label")
        self.gridLayout.addWidget(self.active_label, 14, 2, 1, 1)
        self.active_checkBox = QtWidgets.QCheckBox(self.left_frame)
        self.active_checkBox.setFont(self.font_13)
        self.active_checkBox.setIconSize(QtCore.QSize(20, 20))
        self.active_checkBox.setShortcut("")
        self.active_checkBox.setChecked(False)
        self.active_checkBox.setObjectName("active_checkBox")
        self.active_checkBox.stateChanged.connect(self.change_color_of_check_box)
        self.gridLayout.addWidget(self.active_checkBox, 15, 2, 1, 1, QtCore.Qt.AlignCenter)
        # Σχόλια
        self.comments_label = QtWidgets.QLabel(self.left_frame)
        self.comments_label.setSizePolicy(sizePolicy)
        self.comments_label.setFont(self.font_14_bold)
        self.comments_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comments_label.setAlignment(QtCore.Qt.AlignCenter)
        self.comments_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                          "color: rgb(255, 255, 255);")
        self.comments_label.setObjectName("comments_label")
        self.gridLayout.addWidget(self.comments_label, 16, 0, 1, 3)
        self.comments_textEdit = QtWidgets.QTextEdit(self.left_frame)
        self.comments_textEdit.setSizePolicy(sizePolicy)
        self.comments_textEdit.setMinimumSize(QtCore.QSize(0, 0))
        self.comments_textEdit.setFont(self.font_13)
        self.comments_textEdit.setObjectName("comments_textEdit")
        self.gridLayout.addWidget(self.comments_textEdit, 17, 0, 1, 3)
        # Αποθήκευση
        self.save_btn = QtWidgets.QToolButton(self.left_frame)
        self.save_btn.setSizePolicy(sizePolicy)
        self.save_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.save_btn.setMaximumSize(QtCore.QSize(16777215, 50))
        self.save_btn.setFont(self.font_14_bold)
        self.save_btn.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.save_btn.setObjectName("save_btn")
        self.save_btn.clicked.connect(lambda: self.save_machine())
        self.gridLayout.addWidget(self.save_btn, 18, 0, 1, 2)
        # Μεταφορά
        self.transport_btn = QtWidgets.QToolButton(self.left_frame)
        self.transport_btn.setSizePolicy(sizePolicy)
        self.transport_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.transport_btn.setMaximumSize(QtCore.QSize(16777215, 50))
        self.transport_btn.setFont(self.font_14_bold)
        self.transport_btn.setStyleSheet("background-color: rgb(85, 85, 255);\n"
                                         "font: 75 14pt \"Calibri\";\n"
                                         "color: rgb(255, 255, 255);")
        self.transport_btn.setObjectName("transport_btn")
        self.transport_btn.setIcon(self.transfer_icon)
        self.transport_btn.setIconSize(QtCore.QSize(40, 40))
        self.transport_btn.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.transport_btn.clicked.connect(self.show_transfer_window)
        self.gridLayout.addWidget(self.transport_btn, 18, 2, 1, 1)

        # ----------------------------- Δεξιά right frame -------------------
        self.right_frame = QtWidgets.QFrame(self.splitter)
        self.right_frame.setSizePolicy(sizePolicy)
        self.right_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.right_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.right_frame.setObjectName("right_frame")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.right_frame)
        self.gridLayout_2.setObjectName("gridLayout_2")
        # Εικόνα
        self.image_label = QtWidgets.QLabel(self.right_frame)
        self.image_label.setSizePolicy(sizePolicy)
        self.image_label.setText("")
        self.image_label.setObjectName("image_label")
        # Προηγούμενη
        self.previous_btn = QtWidgets.QToolButton(self.right_frame)
        self.previous_btn.setSizePolicy(sizePolicy)
        self.previous_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.previous_btn.setMaximumSize(QtCore.QSize(16777215, 50))
        self.previous_btn.setFont(self.font_14_bold)
        self.previous_btn.setStyleSheet("background-color: rgb(255, 255, 0);")
        self.previous_btn.setObjectName("previous_btn")
        self.previous_btn.clicked.connect(self.previous_file)
        self.previous_btn.hide()
        self.gridLayout_2.addWidget(self.previous_btn, 1, 1, 1, 1)
        # Επομένη
        self.next_btn = QtWidgets.QToolButton(self.right_frame)
        self.next_btn.setSizePolicy(sizePolicy)
        self.next_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.next_btn.setMaximumSize(QtCore.QSize(16777215, 50))
        self.next_btn.setFont(self.font_14_bold)
        self.next_btn.setStyleSheet("background-color: rgb(255, 255, 0);")
        self.next_btn.setObjectName("next_btn")
        self.next_btn.clicked.connect(self.next_file)
        self.next_btn.hide()
        self.gridLayout_2.addWidget(self.next_btn, 1, 2, 1, 1)
        # Προσθήκη αρχείου
        self.add_file_btn = QtWidgets.QToolButton(self.right_frame)
        self.add_file_btn.setSizePolicy(sizePolicy)
        self.add_file_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.add_file_btn.setMaximumSize(QtCore.QSize(16777215, 50))
        self.add_file_btn.setFont(self.font_14_bold)
        self.add_file_btn.setStyleSheet("background-color: rgb(0, 170, 127);")
        self.add_file_btn.setObjectName("add_file_btn")
        self.add_file_btn.clicked.connect(self.add_file)
        self.gridLayout_2.addWidget(self.add_file_btn, 2, 1, 1, 1)
        # Άνοιγμα αρχείου
        self.open_pdf_file_btn = QtWidgets.QToolButton(self.right_frame)
        self.open_pdf_file_btn.setSizePolicy(sizePolicy)
        self.open_pdf_file_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.open_pdf_file_btn.setMaximumSize(QtCore.QSize(16777215, 50))
        self.open_pdf_file_btn.setFont(self.font_14_bold)
        self.open_pdf_file_btn.setStyleSheet("background-color: rgb(85, 170, 0);")
        self.open_pdf_file_btn.setObjectName("save_file_btn")
        self.open_pdf_file_btn.setText("Άνοιγμα PDF")
        self.open_pdf_file_btn.hide()
        self.gridLayout_2.addWidget(self.open_pdf_file_btn, 2, 2, 1, 1)
        # Αποθήκευση αρχείου
        self.save_file_btn = QtWidgets.QToolButton(self.right_frame)
        self.save_file_btn.setSizePolicy(sizePolicy)
        self.save_file_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.save_file_btn.setMaximumSize(QtCore.QSize(16777215, 50))
        self.save_file_btn.setFont(self.font_14_bold)
        self.save_file_btn.setStyleSheet("background-color: rgb(85, 170, 0);")
        self.save_file_btn.setObjectName("save_file_btn")
        self.save_file_btn.clicked.connect(self.save_file)
        self.save_file_btn.hide()
        self.gridLayout_2.addWidget(self.save_file_btn, 2, 2, 1, 1)
        # Διαγραφή αρχείου
        self.delete_file_btn = QtWidgets.QToolButton(self.right_frame)
        self.delete_file_btn.setSizePolicy(sizePolicy)
        self.delete_file_btn.setMinimumSize(QtCore.QSize(0, 50))
        self.delete_file_btn.setMaximumSize(QtCore.QSize(16777215, 50))
        self.delete_file_btn.setFont(self.font_14_bold)
        self.delete_file_btn.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.delete_file_btn.setObjectName("delete_file_btn")
        self.delete_file_btn.clicked.connect(self.delete_file)
        self.delete_file_btn.hide()
        self.gridLayout_2.addWidget(self.delete_file_btn, 2, 3, 1, 1)

        self.gridLayout_2.addWidget(self.image_label, 0, 1, 1, 3)
        self.gridLayout_3.addWidget(self.splitter, 0, 0, 1, 3)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        self.code_label.setText(_translate("Form", "Κωδικός"))
        self.transport_btn.setText(_translate("Form", "  Μεταφ. Μηχανήμ."))
        self.total_label.setText(_translate("Form", "Σύνολο"))
        self.toner_original_label.setText(_translate("Form", "Toner Original"))
        self.type_label.setText(_translate("Form", "Τύπος"))
        self.toner_compatible_label.setText(_translate("Form", "Toner συμβατό"))
        self.model_label.setText(_translate("Form", "Μοντέλο"))
        self.active_label.setText(_translate("Form", "Ενεργό μηχάνημα"))
        self.active_checkBox.setText(_translate("Form", ""))
        self.office_label.setText(_translate("Form", "Γραφείο"))
        self.comments_label.setText(_translate("Form", "Παρατηρήσεις"))
        self.serial_label.setText(_translate("Form", "Serial"))
        self.start_counter_label.setText(_translate("Form", "Αρχικός"))
        self.final_date_label.setText(_translate("Form", "Ημερομηνία τελικού"))
        self.start_date_label.setText(_translate("Form", "Ημερομηνία αρχικού"))
        self.drum_label.setText(_translate("Form", "Drum"))
        self.billing_type_label.setText(_translate("Form", "Τύπος χρέωσης"))
        self.save_btn.setText(_translate("Form", "Αποθήκευση"))
        self.floor_label.setText(_translate("Form", "Όροφος"))
        self.final_counter_label.setText(_translate("Form", "Τελικός"))
        self.previous_btn.setText(_translate("Form", "Προηγούμενη"))
        self.next_btn.setText(_translate("Form", "Επόμενη"))
        self.delete_file_btn.setText(_translate("Form", "Διαγραφή αρχείου"))
        self.add_file_btn.setText(_translate("Form", "Προσθήκη αρχείου"))
        self.save_file_btn.setText(_translate("Form", "Αποθήκευση αρχείου"))

    def get_data(self, table, item_id):
        self.selected_table = table
        self.selected_item = get_item_from_table(table, item_id)
        self.old_final_date = self.selected_item.ημερο_τελικ
        self.code_lineEdit.setText(self.selected_item.κωδικός)
        self.floor_lineEdit.setText(self.selected_item.όροφος)
        self.type_lineEdit.setText(self.selected_item.τύπος)
        self.model_lineEdit.setText(self.selected_item.μοντέλο)
        self.serial_lineEdit.setText(self.selected_item.serial)
        self.office_lineEdit.setText(self.selected_item.γραφείο)
        self.start_counter_lineEdit.setText(f"{self.selected_item.αρχικός:n}")
        if self.selected_item.ημερ_αρχι == "" or self.selected_item.ημερ_αρχι is None or self.selected_item.ημερ_αρχι == " ":
            self.start_dateEdit.setDate(QtCore.QDate.fromString(today, "dd'/'MM'/'yyyy"))
            self.start_dateEdit.setToolTip("Η ημερομηνία είναι κενή και θα μπει αυτόματα η σημερινή")
            self.start_dateEdit.setStyleSheet("color: red")
        else:
            self.start_dateEdit.setDate(QtCore.QDate.fromString(self.selected_item.ημερ_αρχι, "dd'/'MM'/'yyyy"))
        self.final_counter_lineEdit.setText(f"{self.selected_item.τελικός:n}")
        if self.selected_item.ημερο_τελικ == "" or self.selected_item.ημερο_τελικ is None or self.selected_item.ημερο_τελικ == " ":
            self.final_dateEdit.setDate(QtCore.QDate.fromString(today, "dd'/'MM'/'yyyy"))
            self.final_dateEdit.setToolTip("Η ημερομηνία είναι κενή και θα μπει αυτόματα η σημερινή")
            self.final_dateEdit.setStyleSheet("color: red")
        else:
            self.final_dateEdit.setDate(QtCore.QDate.fromString(self.selected_item.ημερο_τελικ, "dd'/'MM'/'yyyy"))
        self.total_lineEdit.setText(f"{self.selected_item.τελικός - self.selected_item.αρχικός:n}")
        self.toner_original_lineEdit.setText(self.selected_item.toner_original)
        self.toner_compatible_lineEdit.setText(self.selected_item.toner_symbato)
        self.drum_lineEdit.setText(self.selected_item.drum)
        self.billing_type_lineEdit.setText(self.selected_item.χρέωση)
        self.comments_textEdit.setText(self.selected_item.σχόλια)

        if self.selected_item.ενεργό:
            self.active_checkBox.setChecked(True)
            self.active_label.setStyleSheet("background-color: rgb(93, 93, 93);\n"
                                            "color: rgb(255, 255, 255);")
            self.active_checkBox.setIcon(self.active_icon)
            self.active_checkBox.setText(" Ναι")
            # self.finished_label.setStyleSheet("background-color: red;\n" "color: white;")
        else:
            self.active_checkBox.setChecked(False)
            self.active_label.setStyleSheet("background-color: red;\n"
                                            "color: rgb(255, 255, 255);")
            self.active_label.setText("Ανενεργό μηχάνημα")
            self.right_frame.hide()
            self.active_checkBox.setIcon(self.inactive_icon)
            self.active_checkBox.setText(" Οχι")
            # self.finished_label.setStyleSheet("background-color: rgb(0, 170, 0);\n"  "color: rgb(255, 255, 255);")

            # Show images
            # self.update_files()

    def change_color_of_check_box(self):
        if self.selected_table == Εκτός:
            if self.active_checkBox.isChecked():
                self.active_checkBox.setChecked(True)
                self.active_checkBox.setIcon(self.active_icon)
                self.active_checkBox.setStyleSheet("color: red;")

                self.active_checkBox.setText(f"Ναι  -  Θα πρέπει να το μεταφέρεται στον πίνακα επιλογής")
                self.save_btn.hide()
            else:
                self.active_checkBox.setChecked(False)
                self.active_checkBox.setIcon(self.inactive_icon)
                self.active_checkBox.setStyleSheet("color: black;")
                self.active_checkBox.setText("Οχι")
                self.save_btn.show()
            return
        elif self.active_checkBox.isChecked():
            self.active_checkBox.setChecked(True)
            self.active_checkBox.setIcon(self.active_icon)
            self.active_checkBox.setStyleSheet("color: black;")
            self.active_checkBox.setText(f" Ναι")
            self.transport_btn.show()
            self.save_btn.show()
        else:
            self.active_checkBox.setChecked(False)
            self.active_checkBox.setIcon(self.inactive_icon)
            self.active_checkBox.setStyleSheet("color: red;")
            self.active_checkBox.setText("Οχι - Θα μεταφερθεί στον πίνακα Εκτός")
            self.transport_btn.hide()
            self.save_btn.show()

    def save_machine(self):
        if self.serial_lineEdit.text().replace(" ", "") == "":
            self.serial_lineEdit.setStyleSheet("background: red")
            QtWidgets.QMessageBox.warning(None, "Προσοχή", "Το πεδίο Serial ΔΕΝ μπορεί να είναι κενό")
            return
        try:
            if self.selected_item:  # αν είναι απο επεξεργασία υπάρχοντος μηχανήματος
                self.selected_item.κωδικός = self.code_lineEdit.text()
                self.selected_item.όροφος = self.floor_lineEdit.text()
                self.selected_item.τύπος = self.type_lineEdit.text()
                self.selected_item.μοντέλο = self.model_lineEdit.text()
                self.selected_item.serial = self.serial_lineEdit.text()
                self.selected_item.γραφείο = self.office_lineEdit.text()
                self.selected_item.αρχικός = self.start_counter_lineEdit.text().replace(".", "").replace(",", "")
                self.selected_item.ημερ_αρχι = self.start_dateEdit.date().toString('dd/MM/yyyy')
                self.selected_item.τελικός = self.final_counter_lineEdit.text().replace(".", "").replace(",", "")
                self.selected_item.ημερο_τελικ = self.final_dateEdit.date().toString('dd/MM/yyyy')
                total = int(self.selected_item.τελικός) - int(self.selected_item.αρχικός)
                self.selected_item.σύνολο = str(total).replace(".", "")
                self.selected_item.toner_original = self.toner_original_lineEdit.text()
                self.selected_item.toner_symbato = self.toner_compatible_lineEdit.text()
                self.selected_item.drum = self.drum_lineEdit.text()
                self.selected_item.χρέωση = self.billing_type_lineEdit.text()
                self.selected_item.σχόλια = self.comments_textEdit.toPlainText()

                if self.active_checkBox.isChecked():  # Είναι ενεργό μηχάνημα
                    self.selected_item.ενεργό = True
                else:  # Έλεγχός αν είναι ήδη στον πίνακα Εκτός
                    if self.selected_table == Εκτός:
                        self.selected_item.ενεργό = False
                    else:  # μεταφορά στον πίνακα Εκτός
                        new_item_to_add = Εκτός(κωδικός=self.selected_item.κωδικός, όροφος=self.selected_item.όροφος,
                                                τύπος=self.selected_item.τύπος, μοντέλο=self.selected_item.μοντέλο,
                                                serial=self.selected_item.serial, γραφείο=self.selected_item.γραφείο,
                                                αρχικός=self.selected_item.αρχικός,
                                                ημερ_αρχι=self.selected_item.ημερ_αρχι,
                                                τελικός=self.selected_item.τελικός,
                                                ημερο_τελικ=self.selected_item.ημερο_τελικ,
                                                σύνολο=self.selected_item.σύνολο,
                                                toner_original=self.selected_item.toner_original,
                                                toner_symbato=self.selected_item.toner_symbato,
                                                drum=self.selected_item.drum,
                                                χρέωση=self.selected_item.χρέωση, σχόλια=self.selected_item.σχόλια)
                        db.session.add(new_item_to_add)
                        db.session.delete(self.selected_item)

            else:  # αν είναι απο νέα εισαγωγή μηχανήματος
                τελικός = self.final_counter_lineEdit.text().replace(".", "").replace(",", ""),
                αρχικός = self.start_counter_lineEdit.text().replace(".", "").replace(",", ""),
                total = int(τελικός[0]) - int(αρχικός[0])
                new_item = self.selected_table(κωδικός=self.code_lineEdit.text().upper(),
                                               όροφος=self.floor_lineEdit.text().upper(),
                                               τύπος=self.type_lineEdit.text().upper(),
                                               μοντέλο=self.model_lineEdit.text().upper(),
                                               serial=self.serial_lineEdit.text().upper(),
                                               γραφείο=self.office_lineEdit.text().upper(),
                                               αρχικός=αρχικός[0],
                                               ημερ_αρχι=self.start_dateEdit.date().toString('dd/MM/yyyy'),
                                               τελικός=τελικός[0],
                                               ημερο_τελικ=self.final_dateEdit.date().toString('dd/MM/yyyy'),
                                               σύνολο=str(total).replace(".", ""),
                                               toner_original=self.toner_original_lineEdit.text().upper(),
                                               toner_symbato=self.toner_compatible_lineEdit.text().upper(),
                                               drum=self.drum_lineEdit.text().upper(),
                                               χρέωση=self.billing_type_lineEdit.text().upper(),
                                               # αφού εισάγουμε καινούριο μηχάνημα λογικά είναι ενεργό διαφορετικά
                                               # γιατί να το βάλουμε
                                               σχόλια=self.comments_textEdit.toPlainText().upper(), ενεργό=True)
                db.session.add(new_item)
            db.session.commit()
            db.session.close()
            QtWidgets.QMessageBox.information(None, "Πληροφορία", f"Το μηχάνημα αποθηκεύτηκε!")
            self.close()
        except Exception as error:
            db.session.rollback()
            db.session.close()
            traceback.print_exc()
            QtWidgets.QMessageBox.critical(None, "Προσοχή!", f"Κάτι δεν πήγε καλά!\n"
                                                             f"Το μηχάνημα ΔΕΝ αποθηκεύτηκε!\n{error}")
            return

    def closeEvent(self, event):
        # πρέπει να το ορίσουμε και στο show_edit_window στο αρχείο main.py
        self.window_closed.emit()
        event.accept()
        self.close()

    def calculate_total(self):
        total = 0
        if self.final_counter_lineEdit.text() == "":
            self.final_counter_lineEdit.setText("0")
        total = int(self.final_counter_lineEdit.text().replace(".", "").replace(",", "")) - int(
            self.start_counter_lineEdit.text().replace(".", "").replace(",", ""))

        if total < 0:
            self.total_lineEdit.setText(f"{total:n}  Δεν μπορεί να είναι μικρότερο του μηδέν")
            self.total_lineEdit.setStyleSheet("color: red")
            self.save_btn.hide()
            return
        self.total_lineEdit.setText(str(f"{total:n}"))
        self.total_lineEdit.setStyleSheet("color: green")
        # αλλαγή ημερομηνίας αν αλλάξει ο τελικός μετρητής
        if self.final_counter_lineEdit.text().replace(".", "") != self.old_final_counter:
            self.final_dateEdit.setDate(QtCore.QDate.fromString(today, "dd'/'MM'/'yyyy"))
            self.final_dateEdit.setStyleSheet("color: green")
        self.save_btn.show()

    def get_data_from_serial(self, item_id, item_serial, window):
        self.selected_item, self.selected_table = get_item_data_from_all_tables(item_id, item_serial)
        window.setWindowTitle(f"Παράθυρο επεξεργασίας πίνακα {self.selected_table.__tablename__}")
        self.code_lineEdit.setText(self.selected_item.κωδικός)
        self.floor_lineEdit.setText(self.selected_item.όροφος)
        self.type_lineEdit.setText(self.selected_item.τύπος)
        self.model_lineEdit.setText(self.selected_item.μοντέλο)
        self.serial_lineEdit.setText(self.selected_item.serial)
        self.office_lineEdit.setText(self.selected_item.γραφείο)
        self.start_counter_lineEdit.setText(f"{self.selected_item.αρχικός:n}")
        if self.selected_item.ημερ_αρχι == "" or self.selected_item.ημερ_αρχι is None or self.selected_item.ημερ_αρχι == " ":
            self.start_dateEdit.setDate(QtCore.QDate.fromString(today, "dd'/'MM'/'yyyy"))
            self.start_dateEdit.setToolTip("Η ημερομηνία είναι κενή και θα μπει αυτόματα η σημερινή")
            self.start_dateEdit.setStyleSheet("color: red")
        else:
            self.start_dateEdit.setDate(QtCore.QDate.fromString(self.selected_item.ημερ_αρχι, "dd'/'MM'/'yyyy"))
        self.final_counter_lineEdit.setText(f"{self.selected_item.τελικός:n}")
        if self.selected_item.ημερο_τελικ == "" or self.selected_item.ημερο_τελικ is None or self.selected_item.ημερο_τελικ == " ":
            self.final_dateEdit.setDate(QtCore.QDate.fromString(today, "dd'/'MM'/'yyyy"))
            self.final_dateEdit.setToolTip("Η ημερομηνία είναι κενή και θα μπει αυτόματα η σημερινή")
            self.final_dateEdit.setStyleSheet("color: red")
        else:
            self.final_dateEdit.setDate(QtCore.QDate.fromString(self.selected_item.ημερο_τελικ, "dd'/'MM'/'yyyy"))
        self.total_lineEdit.setText(f"{self.selected_item.τελικός - self.selected_item.αρχικός:n}")
        self.toner_original_lineEdit.setText(self.selected_item.toner_original)
        self.toner_compatible_lineEdit.setText(self.selected_item.toner_symbato)
        self.drum_lineEdit.setText(self.selected_item.drum)
        self.billing_type_lineEdit.setText(self.selected_item.χρέωση)
        self.comments_textEdit.setText(self.selected_item.σχόλια)

        if self.selected_item.ενεργό:
            self.active_checkBox.setChecked(True)
            self.active_checkBox.setIcon(self.active_icon)
            self.active_checkBox.setText(" Ναι")
            # self.finished_label.setStyleSheet("background-color: red;\n" "color: white;")
        else:
            self.active_checkBox.setChecked(False)
            self.active_checkBox.setIcon(self.inactive_icon)
            self.active_checkBox.setText(" Οχι")
            # self.finished_label.setStyleSheet("background-color: rgb(0, 170, 0);\n"  "color: rgb(255, 255, 255);")

    def show_file(self):  # Εμφάνιση πρώτου αρχείου όταν ανοίγει το παράθυρο η συνάρτηση καλείτε απο το
        self.images_path = os.path.join(self.BASE_DIR,
                                        f"{self.selected_table.__tablename__}", f"{self.selected_item.serial}")
        if os.path.exists(self.images_path):
            self.files = os.listdir(self.images_path)
        try:

            if self.files[0]:  # αν δεν υπάρχει βγάζει IndexError: δλδ δεν υπάρχει αχρείο
                self.file_index = 0  # Ορισμός οτι βλέπουμε το πρώτο αρχείο
                self.file = os.path.join(self.images_path, self.files[0])
                if pathlib.Path(self.file).suffix != ".pdf":
                    pixmap = QtGui.QPixmap(os.path.join(self.images_path, self.files[0]))
                    resized_pixmap = pixmap.scaled(500, 500, aspectRatioMode=2)
                    self.image_label.setPixmap(resized_pixmap)
                    # self.image_label.setScaledContents(True)
                    self.image_label.show()
                    self.open_pdf_file_btn.hide()  # Απόκρηψη ανοιγμα αρχείου pdf αφου δεν ειναι pdf
                    self.save_file_btn.show()  # Εμφάνηση αποθήκευσης αρχείου αφου δεν ειναι pdf
                else:  # "icons/pdf.png"
                    self.save_file_btn.hide()  # Απόκρηψη αποθήκευσης αρχείου αφου ειναι pdf
                    pixmap = QtGui.QPixmap("icons/pdf.png")
                    resized_pixmap = pixmap.scaled(200, 200, aspectRatioMode=2)
                    self.image_label.setPixmap(resized_pixmap)
                    # self.image_label.setScaledContents(True)
                    self.image_label.show()
                    self.open_pdf_file_btn.clicked.connect(self.open_pdf)
                    self.open_pdf_file_btn.show()

            if len(self.files) == 1:  # αν υπάρχει μόνο ένα αρχείο
                self.file = os.path.join(self.images_path, self.files[0])
                # απόκρυψη κουμπιών
                self.next_btn.hide()
                self.previous_btn.hide()
                if pathlib.Path(self.file).suffix != ".pdf":
                    self.open_pdf_file_btn.hide()  # Απόκρυψη άνοιγμα αρχείου pdf αφού δεν είναι pdf
                    self.save_file_btn.show()  # Εμφάνιση αποθήκευσης αρχείου αφού δεν είναι pdf
                else:
                    self.open_pdf_file_btn.clicked.connect(self.open_pdf)
                    self.save_file_btn.hide()  # Απόκρυψη αποθήκευσης αρχείου αφού είναι pdf
                    self.open_pdf_file_btn.show()

                self.delete_file_btn.show()
            if len(self.files) > 1:
                self.file = os.path.join(self.images_path, self.files[0])
                self.next_btn.show()
                self.previous_btn.show()
                # self.save_file_btn.show()
                self.delete_file_btn.show()
        except (IndexError, TypeError):  # αν δεν υπάρχει κανένα αρχείο
            # NoneType όταν ξεκινάει απο το store.py το self.files = None
            # απόκρυψη κουμπιών
            self.image_label.hide()
            self.next_btn.hide()
            self.previous_btn.hide()
            self.save_file_btn.hide()
            self.delete_file_btn.hide()
            self.open_pdf_file_btn.hide()

    def open_pdf(self):
        if sys.platform == "win32":
            subprocess.Popen(self.file, shell=True)
        elif sys.platform == "linux":
            os.system("okular " + self.file)

    def add_file(self):
        options = QtWidgets.QFileDialog.Options()
        new_files, _ = QtWidgets.QFileDialog.getOpenFileNames(self, "QFileDialog.getOpenFileNames()", "",
                                                              "Υποστηριζόμενα αρχεία .bmp .gif .png .jpeg .jpg .pdf (*.bmp "
                                                              "*.gif *.png *.jpeg *.jpg *.pdf)", options=options)
        if new_files:
            if not os.path.exists(self.images_path):
                os.makedirs(self.images_path)

            # Εισαγωγη αρχείων
            # Αν υπάρχουν αρχεία Ελεγχος αν το αρχείο υπάρχει σε αυτο το προιόν
            for new_file in new_files:
                basename = os.path.basename(new_file).replace(" ", "_")
                if not os.path.exists(os.path.join(self.images_path, os.path.basename(new_file))):
                    shutil.copy(new_file, os.path.join(self.images_path, basename), follow_symlinks=False)
                    QtWidgets.QMessageBox.information(None, "Επιτυχία",
                                                      f'Το αρχεία {os.path.basename(new_file)} προστέθηκε '
                                                      f'επιτυχώς')
                    # Να εμφανίσει το αρχείο
                    self.files = os.listdir(self.images_path)
                    self.show_file()
                else:
                    QtWidgets.QMessageBox.warning(None, "Σφάλμα",
                                                  f"Το αρχείο {os.path.basename(new_file)} υπάρχει.\nΠαρακαλώ αλλάξτε όνομα ή "
                                                  f"επιλεξτε διαφορετικό αρχείο")

    def next_file(self):
        try:
            if len(self.files) > 1:  # αν υπάρχει πάνω απο ένα αρχείο
                if self.files[self.file_index] == self.files[-1]:  # Αν είναι το τελευταίο αρχείο
                    self.file_index = 0  # να πάει πάλι απο την αρχή

                else:  # Αν δεν είναι το τελευταίο
                    self.file_index += 1  # να πάει στο επώμενο αρχείο

                self.file = os.path.join(self.images_path, self.files[self.file_index])  # να πάει στην δευτερη εικόνα
                if pathlib.Path(self.file).suffix != ".pdf":
                    self.open_pdf_file_btn.hide()  # Απόκρηψη ανοιγμα αρχείου pdf αφου δεν ειναι pdf
                    self.save_file_btn.show()  # Εμφάνηση αποθήκευσης αρχείου αφου δεν ειναι pdf
                    self.open_pdf_file_btn.hide()
                    pixmap = QtGui.QPixmap(os.path.join(self.images_path, self.files[self.file_index]))
                    resized_pixmap = pixmap.scaled(500, 500, aspectRatioMode=2)
                    self.image_label.setPixmap(resized_pixmap)
                    # self.image_label.setScaledContents(True)
                else:  # "icons/pdf.png"
                    self.save_file_btn.hide()  # Απόκρηψη αποθήκευσης αρχείου αφου ειναι pdf
                    pixmap = QtGui.QPixmap("icons/pdf.png")
                    resized_pixmap = pixmap.scaled(200, 200, aspectRatioMode=2)
                    self.image_label.setPixmap(resized_pixmap)
                    # self.image_label.setScaledContents(True)
                    self.open_pdf_file_btn.clicked.connect(self.open_pdf)
                    self.open_pdf_file_btn.show()  # Εμφάνηση ανοιγμα pdf
            elif len(self.files) == 1:  # αν υπάρχει μόνο ένα αρχείο
                self.file = os.path.join(self.images_path, self.files[self.file_index])
                # απόκρυψη κουμπιών
                self.next_btn.hide()
                self.previous_btn.hide()
        except TypeError:  # Αν δεν υπάρχει καποιο αρχείο
            # απόκρηψη κουμπιών
            self.next_btn.hide()
            self.previous_btn.hide()

    def previous_file(self):
        try:
            if len(self.files) > 1:  # αν υπάρχει πάνω απο ένα αρχείο
                if self.files[self.file_index] == self.files[0]:  # Αν είναι το πρώτο αρχείο
                    self.file_index = -1  # να πάει πάλι απο το τέλος

                else:  # Αν δεν είναι το πρώτο
                    self.file_index -= 1  # να πάει στο προηγούμενο αρχείο

                self.file = os.path.join(self.images_path, self.files[self.file_index])  # να πάει στη δεύτερη εικόνα
                if pathlib.Path(self.file).suffix != ".pdf":
                    self.open_pdf_file_btn.hide()  # Απόκρυψη ανοιγμα αρχείου pdf αφού δεν είναι pdf
                    self.save_file_btn.show()  # Εμφάνιση αποθήκευσης αρχείου αφού δεν είναι pdf
                    pixmap = QtGui.QPixmap(os.path.join(self.images_path, self.files[self.file_index]))
                    resized_pixmap = pixmap.scaled(500, 500, aspectRatioMode=2)
                    self.image_label.setPixmap(resized_pixmap)
                    # self.image_label.setScaledContents(True)
                else:  # "icons/pdf.png"
                    self.save_file_btn.hide()  # Απόκρυψη αποθήκευσης αρχείου αφού είναι pdf
                    pixmap = QtGui.QPixmap("icons/pdf.png")
                    resized_pixmap = pixmap.scaled(200, 200, aspectRatioMode=2)
                    self.image_label.setPixmap(resized_pixmap)
                    # self.image_label.setScaledContents(True)
                    self.open_pdf_file_btn.clicked.connect(self.open_pdf)
                    self.open_pdf_file_btn.show()  # Εμφάνιση άνοιγμα pdf
            elif len(self.files) == 1:  # αν υπάρχει μόνο ένα αρχείο
                self.file = os.path.join(self.images_path, self.files[self.file_index])
                # απόκρυψη κουμπιών
                self.next_btn.hide()
                self.previous_btn.hide()
        except TypeError:  # Αν δεν υπάρχει κάποιο αρχείο
            # απόκρυψη κουμπιών
            self.next_btn.hide()
            self.previous_btn.hide()

    def save_file(self):
        pixmap = QtGui.QPixmap(os.path.join(self.images_path, self.files[self.file_index]))
        filename = os.path.basename(self.files[self.file_index])
        extension = pathlib.Path(filename).suffix
        try:
            #  file_to_save == ('/home/dannys/Desktop/add_files.png', '')
            file_to_save = QtWidgets.QFileDialog.getSaveFileName(self, 'Αποθήκευση αρχείου', f'{filename}',
                                                                 f'*{extension}')
            if file_to_save[0] == "":  # file_to_save == ('', '') αν πάτησα άκυρο ο χρήστης
                return
            pixmap.save(file_to_save[0], quality=100)
            QtWidgets.QMessageBox.information(None, "Επιτυχία", f'Το αρχεία {filename} αποθηκεύτηκε '
                                                                f'επιτυχώς')
        except TypeError:  # Αν δεν πατήσει αποθήκευση
            return

    def delete_file(self):
        filename = os.path.basename(self.files[self.file_index])
        answer = QtWidgets.QMessageBox.question(self, 'Quit', f"Σίγουρα θέλετε να διαγράψετε το {filename} ?",
                                                QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                                QtWidgets.QMessageBox.No)
        if answer == QtWidgets.QMessageBox.Yes:
            os.remove(os.path.join(self.images_path, self.files[self.file_index]))
            self.files.pop(self.file_index)
            QtWidgets.QMessageBox.information(None, "Επιτυχία", f'Το αρχεία {filename} διαγράφτηκε ' f'επιτυχώς')
            self.show_file()

    def show_transfer_window(self):
        # Αν δεν υπάρχει transfer_window ή αν ο χρήστης έχει κλείσει το παράθυρο απο το Χ πάνω δεξιά
        # ελέγχουμε αν είναι ορατό
        if self.transfer_window is None or not self.transfer_window.isVisible():
            self.transfer_window = QtWidgets.QWidget()
            self.transfer_item = Ui_Transport_Machine_Window()
            if self.active_checkBox.isChecked():
                self.transfer_item.ενεργό = True
            self.transfer_item.selected_machine = self.selected_item
            self.transfer_item.selected_machine_table = self.selected_table
            self.transfer_item.setupUi(self.transfer_window)
            self.transfer_item.window = self.transfer_window
            self.transfer_item.window_closed.connect(self.closed_transfer_window)
            self.transfer_window.show()
            return
        else:
            QtWidgets.QMessageBox.warning(None, 'Προσοχή!', f"Παρακαλώ κλείστε ενα απο τα ανοιχτά παράθυρα "
                                                            f"μεταφοράς μηχανήματος.")

    def closed_transfer_window(self):
        self.transfer_window.close()
        self.close()  # να κλείνει και αυτό (το παράθυρο επεξεργασίας γιατί το μηχάνημα θα έχει αλλάξει πίνακα)

    def create_machine(self):
        self.add_file_btn.hide()
        self.active_checkBox.setChecked(True)
        self.selected_table_offices = get_offices_from_table(self.selected_table)
        self.office_completer = QtWidgets.QCompleter(self.selected_table_offices)
        self.office_completer.popup().setFont(self.font_13)
        self.office_lineEdit.setCompleter(self.office_completer)
        self.office_combobox = QtWidgets.QComboBox(self.left_frame)
        self.office_combobox.setMinimumSize(QtCore.QSize(0, 30))
        self.office_combobox.setFont(self.font_13)
        self.office_combobox.setObjectName("office_combobox")
        self.office_combobox.setLineEdit(self.office_lineEdit)
        self.office_combobox.addItems(self.selected_table_offices)
        self.gridLayout.addWidget(self.office_combobox, 5, 0, 1, 3)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    # app.setStyle("Fusion")
    Form = QtWidgets.QWidget()
    ui = Edit_Ui_Form_Window()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
